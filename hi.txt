describe('Node Expansion and Collapse', () => {
  it('should expand nodes on click', async () => {
    render(<WrappedApp />);

    await waitFor(() => {
      // Ensure the node with text '1' is in the document
      expect(screen.getAllByText('1').length).toBeGreaterThan(0);
    });

    // Find the first node element with the text '1'
    const nodeElements = screen.getAllByText('1');
    const nodeElement = nodeElements[0].closest('.react-flow__node');

    if (nodeElement) {
      fireEvent.click(nodeElement);
    }

    await waitFor(() => {
      // Check for child nodes with texts '2' and '3'
      expect(screen.getAllByText('2').length).toBeGreaterThan(0);
      expect(screen.getAllByText('3').length).toBeGreaterThan(0);
    });
  });

  it('should collapse nodes on second click', async () => {
    render(<WrappedApp />);

    await waitFor(() => {
      // Ensure the node with text '1' is in the document
      expect(screen.getAllByText('1').length).toBeGreaterThan(0);
    });

    // Find the first node element with the text '1'
    const nodeElements = screen.getAllByText('1');
    const nodeElement = nodeElements[0].closest('.react-flow__node');

    if (nodeElement) {
      fireEvent.click(nodeElement);
    }

    await waitFor(() => {
      // Check for child nodes with texts '2' and '3'
      expect(screen.getAllByText('2').length).toBeGreaterThan(0);
      expect(screen.getAllByText('3').length).toBeGreaterThan(0);
    });

    if (nodeElement) {
      fireEvent.click(nodeElement);
    }

    await waitFor(() => {
      // Ensure the child nodes are no longer in the document
      expect(screen.queryByText('2')).not.toBeInTheDocument();
      expect(screen.queryByText('3')).not.toBeInTheDocument();
