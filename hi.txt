import React, { useState, useCallback } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseHandler,
} from 'reactflow';
import 'reactflow/dist/style.css';
import Papa from 'papaparse';
import * as d3 from 'd3';

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

const getLayoutedNodes = (nodes: Node[], edges: Edge[]) => {
  const width = 800; // Example width, adjust as necessary
  const height = 600; // Example height, adjust as necessary

  // Validate root node
  const rootNodes = nodes.filter(node => node.data.parentNode === null);
  if (rootNodes.length !== 1) {
    throw new Error("There should be exactly one root node.");
  }

  // Create a hierarchical structure
  const root = d3.stratify<Node>()
    .id(d => d.id)
    .parentId(d => d.data.parentNode)(nodes as any);

  // Create the tree layout
  const treeLayout = d3.tree<Node>().size([width, height]);
  const treeData = treeLayout(root);

  // Map positions back to nodes
  const nodeMap = new Map(nodes.map(node => [node.id, node]));
  treeData.each(d => {
    const node = nodeMap.get(d.id);
    if (node) {
      node.position = {
        x: d.x,
        y: d.y,
      };
    }
  });

  return nodes;
};

const App: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node>(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>(initialEdges);
  const [allNodes, setAllNodes] = useState<Node[]>([]);
  const [allEdges, setAllEdges] = useState<Edge[]>([]);

  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file)
