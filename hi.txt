import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseHandler,
} from 'reactflow';
import 'reactflow/dist/style.css';
import Papa from 'papaparse';
import dagre from 'dagre';

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];

const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[]) => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: 'TB' });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const App: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node>(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>(initialEdges);
  const [allNodes, setAllNodes] = useState<Node[]>([]);
  const [allEdges, setAllEdges] = useState<Edge[]>([]);

  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      Papa.parse<NodeData>(file, {
        header: true,
        complete: (results) => {
          const data = results.data;
          const processedNodes: Node[] = data.map((item) => ({
            id: item.node,
            type: item.type || 'default',
            data: {
              label: item.node,
              value: item.value,
              graphdepth: item.graphDepth,
              parentNode: item.parentNode,
            },
            position: { x: 0, y: 0 },
            draggable: true,
            hidden: true,
          }));

          const processedEdges: Edge[] = data
            .filter((item) => item.parentNode)
            .map((item) => ({
              id: `e-${item.parentNode}-${item.node}`,
              source: item.parentNode as string,
              target: item.node,
            }));

          setAllNodes(processedNodes);
          setAllEdges(processedEdges);

          // Set the first node (root node) as the initial node
          if (processedNodes.length > 0) {
            setNodes([{ ...processedNodes[0], hidden: false }]);
          }
        },
      });
    }
  }, [setNodes]);

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = allNodes
      .filter(node => node.data.parentNode === nodeId)
      .map(node => ({
        id: `e-${node.data.parentNode}-${node.id}`,
        source: node.data.parentNode as string,
        target: node.id,
      }));
    setEdges(prevEdges => [...prevEdges, ...newEdges]);
  }, [allNodes, setEdges]);

  const onNodeClick: NodeMouseHandler = useCallback((event, node) => {
    const childNodes = allNodes.filter(n => n.data.parentNode === node.id && n.hidden);
    if (childNodes.length > 0) {
      childNodes.forEach(child => {
        child.hidden = false;
      });
      setNodes(prevNodes => {
        const updatedNodes = [...prevNodes, ...childNodes];
        return getLayoutedNodes(updatedNodes, edges);
      });
      generateEdges(node.id);
    }
    setNodes(prevNodes =>
      getLayoutedNodes(prevNodes.map(n =>
        n.id === node.id ? { ...n, hidden: false } : n
      ), edges)
    );
  }, [allNodes, edges, generateEdges]);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  useEffect(() => {
    setNodes((nds) => getLayoutedNodes(nds, edges));
  }, [edges]);

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <input type="file" accept=".csv" onChange={handleFileUpload} />
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onNodeClick={onNodeClick}
        onConnect={onConnect}
        fitView
      >
        <Controls />
        <MiniMap />
        <Background variant="dots" gap={12} size={1} />
      </ReactFlow>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;
