import React, { useState, useCallback } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
} from 'reactflow';
import 'reactflow/dist/style.css';
import Papa from 'papaparse';

const initialNodes = [
  {
    id: 'root',
    type: 'default',
    data: { label: 'Root', value: 'Root Node', graphdepth: 0, parentNode: null, collapsed: true },
    position: { x: 250, y: 25 },
    draggable: true,
  },
];

const initialEdges = [];

const App = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [allNodes, setAllNodes] = useState([]);
  const [allEdges, setAllEdges] = useState([]);

  const handleFileUpload = useCallback((event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        header: true,
        complete: (results) => {
          const data = results.data;
          const processedNodes = data.map((item) => ({
            id: item.node,
            type: item.type || 'default',
            data: {
              label: item.node,
              value: item.value,
              graphdepth: parseInt(item.graphDepth, 10),
              parentNode: item.parentNode,
              collapsed: true,
            },
            position: { x: 0, y: 0 },
            draggable: true,
          }));

          const processedEdges = data
            .filter((item) => item.parentNode)
            .map((item) => ({
              id: `e-${item.parentNode}-${item.node}`,
              source: item.parentNode,
              target: item.node,
            }));

          console.log('Processed Nodes:', processedNodes);
          console.log('Processed Edges:', processedEdges);

          setAllNodes(processedNodes);
          setAllEdges(processedEdges);
        },
      });
    }
  }, []);

  const generateEdgesAndNodes = useCallback((nodeId) => {
    const newNodes = allNodes.filter((node) => node.data.parentNode === nodeId && node.data.collapsed);
    const newEdges = allEdges.filter((edge) => edge.source === nodeId);

    setNodes((prevNodes) =>
      prevNodes.map((n) =>
        n.id === nodeId ? { ...n, data: { ...n.data, collapsed: false } } : n
      ).concat(newNodes)
    );

    setEdges((prevEdges) => prevEdges.concat(newEdges));
  }, [allNodes, allEdges, setNodes, setEdges]);

  const onNodeClick = useCallback((event, node) => {
    console.log('Node Clicked:', node);
    if (node.data.collapsed) {
      generateEdgesAndNodes(node.id);
    }
  }, [generateEdgesAndNodes]);

  const onConnect = useCallback(
    (params) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <input type="file" accept=".csv" onChange={handleFileUpload} />
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onNodeClick={onNodeClick}
        onConnect={onConnect}
        fitView
      >
        <Controls />
        <MiniMap />
        <Background variant="dots" gap={12} size={1} />
      </ReactFlow>
    </div>
  );
};

export default () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);
