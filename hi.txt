import React, { useState, useEffect } from "react";
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  useReactFlow,
  Node,
  Edge,
} from "reactflow";
import "reactflow/dist/style.css";
import dagre from "dagre";
import {
  graphContainerStyles,
  controlsStyles,
  controlsLabelStyles,
  controlsInputStyles,
  controlsSelectStyles,
  controlsSpanStyles,
  reactflowWrapperStyles,
} from "./styles";

interface DataItem {
  parent_node: string | null;
  node: string;
  graph_depth: number;
  type: string;
  name: string;
  value: string;
}

interface HierarchicalGraphProps {
  data: DataItem[];
  sliderValue: number;
}

const nodeWidth = 172;
const nodeHeight = 36;

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const parseData = (data: DataItem[]) => {
  const hierarchy: { [key: string]: any } = {};

  data.forEach((item) => {
    const { parent_node, node, graph_depth, type, name, value } = item;

    if (!hierarchy[node]) {
      hierarchy[node] = {
        id: node,
        label: name,
        children: [],
        type,
        name,
        value,
        graph_depth,
      };
    }

    if (parent_node) {
      if (!hierarchy[parent_node]) {
        hierarchy[parent_node] = { id: parent_node, children: [] };
      }
      hierarchy[parent_node].children.push(hierarchy[node]);
    }
  });

  return hierarchy;
};

const getNodeColor = (type: string) => {
  switch (type) {
    case "input":
      return "#FFD700"; // Gold
    case "output":
      return "#FF6347"; // Tomato
    case "option":
      return "#40E0D0"; // Turquoise
    default:
      return "#D3D3D3"; // Light Gray
  }
};

const getLayoutedElements = (
  nodes: Node[],
  edges: Edge[],
  direction: string = "TB"
) => {
  const isHorizontal = direction === "LR" || direction === "RL";
  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  nodes.forEach((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    (node as any).targetPosition = isHorizontal ? "left" : "top";
    (node as any).sourcePosition = isHorizontal ? "right" : "bottom";

    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };

    return node;
  });

  return { nodes, edges };
};

const HierarchicalGraph: React.FC<HierarchicalGraphProps> = ({
  data,
  sliderValue,
}) => {
  const hierarchy = parseData(data);
  const [selectedParentNode, setSelectedParentNode] =
    useState("<SCLRootCalcNode>");
  const initialElements: Node[] = [
    {
      id: hierarchy[selectedParentNode].id,
      type: hierarchy[selectedParentNode].type,
      data: { label: hierarchy[selectedParentNode].label },
      position: { x: 0, y: 0 },
      style: {
        backgroundColor: getNodeColor(hierarchy[selectedParentNode].type),
      },
    },
  ];

  const [nodes, setNodes, onNodesChange] = useNodesState(initialElements);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [expandedNodes, setExpandedNodes] = useState<string[]>([]);
  const [direction, setDirection] = useState("TB");

  const { project } = useReactFlow();

  const expandNode = (node: Node) => {
    if (
      !hierarchy[node.id] ||
      !hierarchy[node.id].children ||
      hierarchy[node.id].children.length === 0
    ) {
      return;
    }

    const currentExpandedNodes = new Set(expandedNodes);

    if (currentExpandedNodes.has(node.id)) {
      // Collapse the node
      currentExpandedNodes.delete(node.id);
      // Remove children nodes and their edges
      const nodesToKeep = nodes.filter(
        (n) =>
          !hierarchy[node.id].children.some((child: any) => child.id === n.id)
      );
      const edgesToKeep = edges.filter(
        (e) =>
          !hierarchy[node.id].children.some(
            (child: any) => e.source === node.id && e.target === child.id
          )
      );
      setNodes(nodesToKeep);
      setEdges(edgesToKeep);
    } else {
      // Expand the node
      currentExpandedNodes.add(node.id);

      const newNodes = [...nodes];
      const newEdges = [...edges];

      hierarchy[node.id].children.forEach((child: any) => {
        const position = project({
          x: node.position.x + (Math.random() - 0.5) * 200,
          y: node.position.y + 100,
        });
        newNodes.push({
          id: child.id,
          data: { label: child.label },
          position,
          style: { backgroundColor: getNodeColor(child.type) },
        });

        newEdges.push({
          id: `${node.id}-${child.id}`,
          source: node.id,
          target: child.id,
          type: "smoothstep",
          animated: false,
        });

        // Recursively expand child nodes if they are already in the expanded list
        if (currentExpandedNodes.has(child.id)) {
          expandNode(child);
        }
      });

      setNodes(newNodes);
      setEdges(newEdges);
    }

    setExpandedNodes(Array.from(currentExpandedNodes));
  };

  useEffect(() => {
    const layoutedElements = getLayoutedElements(nodes, edges, direction);
    setNodes(layoutedElements.nodes);
    setEdges(layoutedElements.edges);
  }, [nodes.length, edges.length, sliderValue, direction]);

  useEffect(() => {
    const selectedNode = hierarchy[selectedParentNode];
    if (selectedNode) {
      const initialElements = [
        {
          id: selectedNode.id,
          type: selectedNode.type,
          data: { label: selectedNode.label },
          position: { x: 0, y: 0 },
          style: { backgroundColor: getNodeColor(selectedNode.type) },
        },
      ];
      setNodes(initialElements);
      setEdges([]);
      setExpandedNodes([]);
    }
  }, [selectedParentNode]);

  return (
    <div style={graphContainerStyles}>
      <div style={controlsStyles}>
        <label style={controlsLabelStyles}>
          Direction:
          <select
            value={direction}
            onChange={(e) => setDirection(e.target.value)}
            style={controlsSelectStyles}
          >
            <option value="TB">Top-Bottom</option>
            <option value="BT">Bottom-Top</option>
            <option value="LR">Left-Right</option>
            <option value="RL">Right-Left</option>
          </select>
        </label>
        <label style={{ ...controlsLabelStyles, marginLeft: "20px" }}>
          Parent Node:
          <select
            value={selectedParentNode}
            onChange={(e) => setSelectedParentNode(e.target.value)}
            style={controlsSelectStyles}
          >
            {Object.keys(hierarchy).map((key) => (
              <option key={key} value={key}>
                {hierarchy[key].label}
              </option>
            ))}
          </select>
        </label>
      </div>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        fitView
        onNodeClick={(event, node) => expandNode(node)}
      >
        <MiniMap />
        <Controls />
        <Background />
      </ReactFlow>
    </div>
  );
};

const GraphWithProvider: React.FC<HierarchicalGraphProps> = (props) => (
  <ReactFlowProvider>
    <HierarchicalGraph {...props} />
  </ReactFlowProvider>
);

export default GraphWithProvider;
// /component/Hierarchical.tsx