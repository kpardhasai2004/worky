import React from 'react';

const ApiDialog = ({ data, loading, error, onClose }) => {
  return (
    <div className="dialog-backdrop">
      <div className="dialog">
        {loading && <p>Loading...</p>}
        {error && <p>Error: {error}</p>}
        {data && (
          <div>
            <h3>API Response:</h3>
            <pre>{JSON.stringify(data, null, 2)}</pre>
          </div>
        )}
        <button onClick={onClose}>Close</button>
      </div>
    </div>
  );
};

export default ApiDialog;


import React, { useState } from 'react';
import axios from 'axios';
import ApiDialog from './ApiDialog'; // Import the ApiDialog component

const App = () => {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get('https://api.example.com/data');
      setData(response.data); // Set only the data part of the response
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDialog = () => {
    fetchData();
    setIsDialogOpen(true);
  };

  const handleCloseDialog = () => {
    setIsDialogOpen(false);
  };

  return (
    <div>
      <button onClick={handleOpenDialog}>Fetch Data</button>
      {isDialogOpen && (
        <ApiDialog
          data={data}
          loading={loading}
          error={error}
          onClose={handleCloseDialog}
        />
      )}
    </div>
  );
};

export default App;










































Certainly! Here's a slide-based version of the guide, each section divided into separate slides for clarity.

---

### Slide 1: Title
# React Testing Library: A Comprehensive Guide

---

### Slide 2: Introduction
- **React Testing Library (RTL)** is a lightweight solution for testing React components by simulating user interactions and verifying outputs.

---

### Slide 3: Basic Concepts
- **`describe` block:** Groups related tests.
- **`it` block:** Individual test cases.

---

### Slide 4: Importing Required Functions
```javascript
import { render, fireEvent, screen } from '@testing-library/react';
```

---

### Slide 5: Render Function Usage
```javascript
const { unmount, container, ...queries } = render(Component);
```

---

### Slide 6: Render Function Returns
- `unmount`: Function to unmount the component.
- `container`: Reference to the DOM node where the component is mounted.
- All queries from DOM Testing Library, bound to the document.

---

### Slide 7: Example Test Case
```javascript
test('loads items eventually', async () => {
  render(<Page />);

  // Click button
  fireEvent.click(screen.getByText('Load'));

  // Wait for page to update with query text
  const items = await screen.findAllByText(/Item #[0-9]: /);
  expect(items).toHaveLength(10);
});
```

---

### Slide 8: Queries
- RTL queries are based on the document by default, simplifying test syntax.

---

### Slide 9: Query Types
| Query       | No Match  | 1 Match | 1+ Match | Await? |
|-------------|------------|---------|----------|--------|
| getBy       | throw      | return  | throw    | No     |
| findBy      | throw      | return  | throw    | Yes    |
| queryBy     | null       | return  | throw    | No     |
| getAllBy    | throw      | array   | array    | No     |
| findAllBy   | throw      | array   | array    | Yes    |
| queryAllBy  | []         | array   | array    | No     |

---

### Slide 10: Specific Queries (1)
**ByLabelText:** Find by label or aria-label text content
  - `getByLabelText`
  - `queryByLabelText`
  - `getAllByLabelText`
  - `queryAllByLabelText`
  - `findByLabelText`
  - `findAllByLabelText`

ByLabelText: Find by label or aria-label text content

describe('ByLabelText', () => {
  it('should find an element by its label text', () => {
    render(<label htmlFor="username">Username</label><input id="username" />);
    const input = screen.getByLabelText('Username');
    expect(input).toBeInTheDocument();
  });
});

---

### Slide 11: Specific Queries (2)
**ByPlaceholderText:** Find by input placeholder value
  - `getByPlaceholderText`
  - `queryByPlaceholderText`
  - `getAllByPlaceholderText`
  - `queryAllByPlaceholderText`
  - `findByPlaceholderText`
  - `findAllByPlaceholderText`

ByPlaceholderText: Find by input placeholder value

describe('ByPlaceholderText', () => {
  it('should find an element by its placeholder text', () => {
    render(<input placeholder="Enter your name" />);
    const input = screen.getByPlaceholderText('Enter your name');
    expect(input).toBeInTheDocument();
  });
});

---

### Slide 12: Specific Queries (3)
**ByText:** Find by element text content
  - `getByText`
  - `queryByText`
  - `getAllByText`
  - `queryAllByText`
  - `findByText`
  - `findAllByText`

ByText: Find by element text content

describe('ByText', () => {
  it('should find an element by its text content', () => {
    render(<div>Hello World</div>);
    const div = screen.getByText('Hello World');
    expect(div).toBeInTheDocument();
  });
});

---

### Slide 13: Specific Queries (4)
**ByDisplayValue:** Find by form element current value
  - `getByDisplayValue`
  - `queryByDisplayValue`
  - `getAllByDisplayValue`
  - `queryAllByDisplayValue`
  - `findByDisplayValue`
  - `findAllByDisplayValue`

ByDisplayValue: Find by form element current value

describe('ByDisplayValue', () => {
  it('should find an element by its current value', () => {
    render(<input value="John Doe" />);
    const input = screen.getByDisplayValue('John Doe');
    expect(input).toBeInTheDocument();
  });
});

---

### Slide 14: Specific Queries (5)
**ByAltText:** Find by img alt attribute
  - `getByAltText`
  - `queryByAltText`
  - `getAllByAltText`
  - `queryAllByAltText`
  - `findByAltText`
  - `findAllByAltText`

ByAltText: Find by img alt attribute

describe('ByAltText', () => {
  it('should find an image by its alt text', () => {
    render(<img alt="Profile Picture" src="profile.jpg" />);
    const img = screen.getByAltText('Profile Picture');
    expect(img).toBeInTheDocument();
  });
});

---

### Slide 15: Specific Queries (6)
**ByTitle:** Find by title attribute or svg title tag
  - `getByTitle`
  - `queryByTitle`
  - `getAllByTitle`
  - `queryAllByTitle`
  - `findByTitle`
  - `findAllByTitle`

ByTitle: Find by title attribute or svg title tag

describe('ByTitle', () => {
  it('should find an element by its title attribute', () => {
    render(<span title="Close">X</span>);
    const span = screen.getByTitle('Close');
    expect(span).toBeInTheDocument();
  });
});

---

### Slide 16: Specific Queries (7)
**ByRole:** Find by aria role
  - `getByRole`
  - `queryByRole`
  - `getAllByRole`
  - `queryAllByRole`
  - `findByRole`
  - `findAllByRole`

ByRole: Find by aria role

describe('ByRole', () => {
  it('should find an element by its role', () => {
    render(<button role="button">Click me</button>);
    const button = screen.getByRole('button');
    expect(button).toBeInTheDocument();
  });
});

---

### Slide 17: Specific Queries (8)
**ByTestId:** Find by data-testid attribute
  - `getByTestId`
  - `queryByTestId`
  - `getAllByTestId`
  - `queryAllByTestId`
  - `findByTestId`
  - `findAllByTestId`

ByTestId: Find by data-testid attribute

describe('ByTestId', () => {
  it('should find an element by its test id', () => {
    render(<div data-testid="custom-element">Custom Element</div>);
    const element = screen.getByTestId('custom-element');
    expect(element).toBeInTheDocument();
  });
});


---

### Slide 18: Async Utilities
- **waitFor:** Retry the function until it stops throwing or times out.
- **waitForElementToBeRemoved:** Retry the function until it no longer returns a DOM node.

---

### Slide 19: Events
- **fireEvent:** Trigger DOM events.
  ```javascript
  fireEvent.click(node);
  ```

---

### Slide 20: Other Utilities (1)
- **within:** Take a node and return an object with all queries bound to the node.
- **configure:** Change global options.
  ```javascript
  configure({ testIdAttribute: 'my-data-test-id' });
  ```

---

### Slide 21: Other Utilities (2)
- **cleanup:** Clears the DOM, useful in `afterEach`.

---

### Slide 22: Text Match Options (1)
Given the following HTML:
```html
<div>Hello World</div>
```
- **Full string match:**
  ```javascript
  getByText('Hello World');
  ```

---

### Slide 23: Text Match Options (2)
- **Substring match:**
  ```javascript
  getByText('llo Worl', { exact: false });
  ```
- **Ignore case:**
  ```javascript
  getByText('hello world', { exact: false });
  ```

---

### Slide 24: Conclusion
- React Testing Library is a powerful tool for testing React components by focusing on user interactions and realistic use cases.
- Utilize its robust set of queries and utilities to write effective and maintainable tests.

---

Feel free to adjust the content and order of the slides based on your preferences and the specific requirements of your presentation.

beforeEach and afterEach: These are Jest functions used to set up and clean up tests.

render: Renders a React component into the testing environment.

screen: Provides access to the rendered output, allowing you to query elements.

fireEvent and userEvent: Simulate user interactions.

waitFor, waitForElementToBeRemoved: Wait for an element to appear or disappear.

Queries: Various query functions like getByText, getByRole, getByTestId, etc.


describe('Page Component', () => {
  it('loads items eventually', async () => {
    render(<Page />);

    // Click button
    fireEvent.click(screen.getByText('Load'));

    // Wait for page to update with query text
    const items = await screen.findAllByText(/Item #[0-9]: /);
    expect(items).toHaveLength(10);
  });
});
---

### Slide 9: Summary
| Query Type | Synchronous/Asynchronous | Failure Mode          | Use Case                                          |
|------------|---------------------------|-----------------------|--------------------------------------------------|
| `get`      | Synchronous               | Throws error          | Element should be present immediately             |
| `query`    | Synchronous               | Returns `null`        | Element might not be present, and that's okay     |
| `find`     | Asynchronous              | Throws error after timeout | Element should appear eventually (dynamic content) |

---

### Slide 10: Conclusion
- **Choosing the Right Query**: Selecting the appropriate query type depends on your specific testing needs.
- **`get` Queries**: For elements that should always be present.
- **`query` Queries**: For elements that might not be present, and that's acceptable.
- **`find` Queries**: For elements that are expected to appear after some delay or asynchronous operation.

---

This slide deck should help illustrate the differences and appropriate use cases for `get`, `query`, and `find` queries in React Testing Library.
