// App.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import WrappedApp from './App';
import { NodeData } from './App'; // Import the NodeData interface if needed

const mock = new MockAdapter(axios);

const mockNodeData: NodeData[] = [
  { node: '1', type: 'input', value: 'root', graphDepth: 0 },
  { node: '2', parentNode: '1', value: 'child1', graphDepth: 1 },
  { node: '3', parentNode: '1', value: 'child2', graphDepth: 1 },
];

beforeEach(() => {
  mock.onGet('https://api.example.com/nodes').reply(200, mockNodeData);
});

afterEach(() => {
  mock.reset();
});

describe('App Component', () => {
  describe('Initial Render and Data Fetch', () => {
    test('renders without crashing and fetches nodes', async () => {
      render(<WrappedApp />);

      await waitFor(() => {
        expect(screen.getByLabelText('Direction:')).toBeInTheDocument();
      });

      await waitFor(() => {
        expect(screen.getByText('1')).toBeInTheDocument();
      });
    });
  });

  describe('Layout Direction', () => {
    test('changes layout direction', async () => {
      render(<WrappedApp />);

      await waitFor(() => {
        expect(screen.getByLabelText('Direction:')).toBeInTheDocument();
      });

      fireEvent.change(screen.getByLabelText('Direction:'), { target: { value: 'LR' } });

      expect(screen.getByLabelText('Direction:')).toHaveValue('LR');
    });
  });

  describe('Parent Node Selection', () => {
    test('changes parent node', async () => {
      render(<WrappedApp />);

      await waitFor(() => {
        expect(screen.getByLabelText('Parent Node:')).toBeInTheDocument();
      });

      fireEvent.change(screen.getByLabelText('Parent Node:'), { target: { value: '1' } });

      expect(screen.getByLabelText('Parent Node:')).toHaveValue('1');
    });
  });

  describe('Node Expansion and Collapse', () => {
    test('expands and collapses nodes on click', async () => {
      render(<WrappedApp />);

      await waitFor(() => {
        expect(screen.getByText('1')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('1'));

      await waitFor(() => {
        expect(screen.getByText('2')).toBeInTheDocument();
        expect(screen.getByText('3')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('1'));

      await waitFor(() => {
        expect(screen.queryByText('2')).not.toBeInTheDocument();
        expect(screen.queryByText('3')).not.toBeInTheDocument();
      });
    });
  });
});