import React, { useState, useCallback } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  ReactFlowProvider,
  useNodesState,
  useEdgesState,
  addEdge,
  useReactFlow,
} from 'reactflow';
import 'reactflow/dist/style.css';
import Papa from 'papaparse';

export default function App() {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const { fitView } = useReactFlow();

  const handleFileUpload = useCallback((event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        header: true,
        complete: (results) => {
          const data = results.data;
          const processedNodes = data.map((item) => ({
            id: item.node,
            type: item.type || 'default',
            data: { label: item.node, value: item.value, graphdepth: item.graphDepth, parentNode: item.parentNode },
            position: { x: 0, y: 0 }, // Initial positions, to be calculated
            draggable: true, // Make nodes movable
          }));

          const { nodes: positionedNodes, edges: generatedEdges } = getLayoutedElements(processedNodes);
          setNodes(positionedNodes);
          setEdges(generatedEdges);
        },
      });
    }
  }, [setNodes, setEdges]);

  const getLayoutedElements = (nodes) => {
    const nodeMap = new Map();
    const levels = new Map();
    const spacingY = 100; // Vertical spacing between levels
    const spacingX = 200; // Horizontal spacing between siblings

    // Initialize the root nodes (nodes without parentNode)
    nodes.forEach(node => {
      if (!node.data.parentNode) {
        node.position = { x: 0, y: 0 };
        nodeMap.set(node.id, node);
        levels.set(node.id, 0);  // Root nodes are at level 0
      }
    });

    // Recursive function to position children nodes
    const positionChildren = (parentId, depth, offsetX) => {
      const children = nodes.filter(node => node.data.parentNode === parentId);

      children.forEach((child, index) => {
        const parentNode = nodeMap.get(parentId);
        child.position = {
          x: parentNode.position.x + (index * spacingX) - ((children.length - 1) * spacingX) / 2,
          y: parentNode.position.y + spacingY
        };
        nodeMap.set(child.id, child);
        levels.set(child.id, depth);

        // Recur for the child's children
        positionChildren(child.id, depth + 1, 0);
      });
    };

    // Position children of root nodes
    nodes.forEach(node => {
      if (!node.data.parentNode) {
        positionChildren(node.id, 1, 0);
      }
    });

    const edges = nodes
      .filter(node => node.data.parentNode)
      .map(node => ({
        id: `e-${node.data.parentNode}-${node.id}`,
        source: node.data.parentNode,
        target: node.id,
      }));

    return { nodes: Array.from(nodeMap.values()), edges };
  };

  const onConnect = useCallback(
    (params) => setEdges((eds) => addEdge(params, eds)),
    [setEdges],
  );

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <input type="file" accept=".csv" onChange={handleFileUpload} />
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        fitView
      >
        <Controls />
        <MiniMap />
        <Background variant="dots" gap={12} size={1} />
      </ReactFlow>
    </div>
  );
}

function AppWrapper() {
  return (
    <ReactFlowProvider>
      <App />
    </ReactFlowProvider>
  );
}

export default AppWrapper;

