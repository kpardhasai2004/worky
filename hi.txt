// src/store.js
import create from 'zustand';

const useStore = create((set) => ({
  nodes: [],
  edges: [],
  setNodes: (nodes) => set({ nodes }),
  setEdges: (edges) => set({ edges }),
}));

export default useStore;


















// src/App.jsx
import React, { useCallback } from 'react';
import ReactFlow, { MiniMap, Controls, Background, addEdge } from 'react-flow';
import Papa from 'papaparse';
import useStore from './store';

const App = () => {
  const { nodes, setNodes, edges, setEdges } = useStore();

  const handleFileUpload = useCallback((event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        header: true,
        complete: (results) => {
          const data = results.data;
          const processedNodes = data.map((item) => ({
            id: item.node,
            type: item.type || 'default',
            data: { label: item.node, value: item.value, graphdepth: item.graphDepth, parentNode: item.parentNode },
            position: { x: 0, y: 0 },
            draggable: true,
            collapsed: false,
          }));

          const { nodes: updatedNodes, edges: updatedEdges } = getLayoutedElements(processedNodes);
          setNodes(updatedNodes);
          setEdges(updatedEdges);
        },
      });
    }
  }, [setNodes, setEdges]);

  const getLayoutedElements = (nodes) => {
    // Simplified example for node positioning and edge generation
    const updatedEdges = nodes.map((node, index) => ({
      id: `e${index}`,
      source: 'sourceNodeId',
      target: node.id,
    }));

    return { nodes, edges: updatedEdges };
  };

  const onConnect = useCallback(
    (params) => setEdges((eds) => addEdge(params, eds)),
    [setEdges],
  );

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <input type="file" accept=".csv" onChange={handleFileUpload} />
      <ReactFlow
        elements={nodes.concat(edges)}
        onConnect={onConnect}
      >
        <Controls />
        <MiniMap />
        <Background />
      </ReactFlow>
    </div>
  );
};

export default App;



















// src/index.js (or wherever your main entry point is)
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import useStore from './store'; // Import the Zustand store

// Wrap your App component with the Zustand provider
const Root = () => (
  <useStore.Provider>
    <App />
  </useStore.Provider>
);

ReactDOM.render(<Root />, document.getElementById('root'));
