import React, { useState, useCallback } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  Elements,
  Connection,
  Edge as FlowEdge,
  Node as FlowNode,
  OnLoadParams,
} from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';
import Papa from 'papaparse';

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Elements = [];

const initialEdges: FlowEdge[] = [];

const App: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState<FlowNode>(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<FlowEdge>(initialEdges);
  const [allNodes, setAllNodes] = useState<FlowNode[]>([]);
  const [allEdges, setAllEdges] = useState<FlowEdge[]>([]);

  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      Papa.parse<NodeData>(file, {
        header: true,
        complete: (results) => {
          const data = results.data;
          const processedNodes: FlowNode[] = data.map((item) => ({
            id: item.node,
            type: item.type || 'default',
            data: {
              label: item.node,
              value: item.value,
              graphdepth: parseInt(item.graphDepth.toString(), 10),
              parentNode: item.parentNode,
            },
            position: { x: 0, y: 0 },
            draggable: true,
            hidden: true,
          }));

          const processedEdges: FlowEdge[] = data
            .filter((item) => item.parentNode)
            .map((item) => ({
              id: `e-${item.parentNode}-${item.node}`,
              source: item.parentNode as string,
              target: item.node,
            }));

          setAllNodes(processedNodes);
          setAllEdges(processedEdges);

          // Set the first node (root node) as the initial node
          if (processedNodes.length > 0) {
            setNodes([{ ...processedNodes[0], hidden: false }]);
          }
        },
      });
    }
  }, [setNodes]);

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = allNodes
      .filter(node => node.data.parentNode === nodeId)
      .map(node => ({
        id: `e-${node.data.parentNode}-${node.id}`,
        source: node.data.parentNode as string,
        target: node.id,
      }));
    setEdges(prevEdges => [...prevEdges, ...newEdges]);
  }, [allNodes, setEdges]);

  const onNodeClick = useCallback((event, node) => {
    if (node.data.collapsed) {
      const childNodes = allNodes.filter(n => n.data.parentNode === node.id);
      childNodes.forEach(child => {
        child.position = {
          x: node.position.x + 200,
          y: node.position.y + 100 * childNodes.indexOf(child),
        };
        child.hidden = false;
      });
      setNodes(prevNodes => [...prevNodes, ...childNodes]);
      generateEdges(node.id);
    }
    setNodes(prevNodes =>
      prevNodes.map(n =>
        n.id === node.id ? { ...n, data: { ...n.data, collapsed: !n.data.collapsed } } : n
      )
    );
  }, [allNodes, generateEdges]);

  const onConnect = useCallback(
    (params: FlowEdge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <input type="file" accept=".csv" onChange={handleFileUpload} />
      <ReactFlow
        elements={[...nodes, ...edges]}
        onElementsRemove={(elementsToRemove) => setNodes((nds) => nds.filter((n) => !elementsToRemove.includes(n)))}
        onConnect={onConnect}
        onLoad={(reactFlowInstance: OnLoadParams) => reactFlowInstance.fitView()}
        onNodeClick={onNodeClick}
        snapToGrid
        snapGrid={[15, 15]}
      >
        <Controls />
        <MiniMap />
        <Background variant="dots" gap={12} size={1} />
      </ReactFlow>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;
